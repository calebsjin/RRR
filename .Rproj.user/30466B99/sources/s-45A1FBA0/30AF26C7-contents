library(mvtnorm)
library(invgamma)
rm(list=ls())
## Data & Model##
row1 <- c(1,0,0,2,-1,0,0,0,0,0,1,-1)
row2 <- c(0,1,0,0,0,-3,2,0,0,0,-1,3)
row3 <- c(0,0,1,0,0,0,0,3,-3,4,2,2)
C <- rbind(row1,row2,row3,row1,row2,row2,row3)
true.rank <- 3
p <- dim(C)[1]
q <- dim(C)[2]
true.sig2 <- 2
true.SIGe <- diag(true.sig2,q)
n=50
set.seed(2144)
X <- matrix(rnorm(n*p,0,1),n,p)
E <- rmvnorm(n, rep(0,q), true.SIGe, method="chol") 
Y=X%*%C+E
a=b=1
tau2=1e-3
MC.size=5000
burn_in=3000
## Reduced Rank Regression model ##
error <- rep(NA,p)

for (r in 1:p) {
  Hat.A <- array(NA,dim = c(p,r,MC.size))
  Hat.B <- array(NA,dim = c(q,r,MC.size))
  Hat.C <- array(NA,dim = c(p,q,MC.size))
  # initial values
  hat.C <- coef(lm(Y~X-1))
  if (r==1){
    hat.B <- as.matrix(hat.C[1:r,])
  } else {
    hat.B <- t(hat.C[1:r,])
  }
  if (r==p) {
    hat.A <- diag(1,r)
  } else {
    hat.A <- rbind(diag(1,r),hat.C[(r+1):p,]%*%hat.B%*%solve(crossprod(hat.B)))
  }
  
  hat.sig2 <- mean(diag(tcrossprod(Y-X%*%hat.A%*%t(hat.B))))  #true.sig2
  ## MCMC ##
  for (jin in 1:MC.size) {
    # Sampling A
    if (r==p){
      Hat.A[,,jin] <- hat.A
    } else {
      for(j in (r+1):p) {
        Sig.A_j <- solve(crossprod(hat.B)*as.numeric(crossprod(X[,j]))/hat.sig2+diag(tau2,r))
        mu.A_j <- Sig.A_j%*%t(hat.B)%*%t(Y-X[,-j]%*%hat.A[-j,]%*%t(hat.B))%*%X[,j]/hat.sig2
        hat.a_j <- rmvnorm(n=1,mean = mu.A_j,sigma = Sig.A_j)
        hat.A[j,] <- hat.a_j
      }
      Hat.A[,,jin] <- hat.A
    }
    # Sampling B
    Sig.B_l <- solve(crossprod(X%*%hat.A)/hat.sig2+diag(tau2,r))
    for(l in 1:q) {
      mu.B_l <- Sig.B_l%*%t(X%*%hat.A)%*%Y[,l]/hat.sig2
      hat.b_l <- t(rmvnorm(n=1,mean = mu.B_l,sigma = Sig.B_l))
      hat.B[l,] <- t(hat.b_l)
    }
    Hat.C[,,jin] <- hat.A%*%t(hat.B)
    Hat.B[,,jin] <- hat.B
    #Sampling Sig2
    hat.sig2 <- rinvgamma(n = 1,shape = (q*n+a)/2,rate = 0.5*(b+sum(diag(tcrossprod(Y-X%*%hat.A%*%t(hat.B))))))
    #print(jin)
  }
  hat.C <- apply(Hat.C[,,-(1:burn_in)],c(1,2),mean)
  print(hat.C)
  print(C)
  error[r] <- sum((hat.C-C)^2)/(p*q)
  print(error[r])
}
